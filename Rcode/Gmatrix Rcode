#Downloads and unzips the G-matrix Data repository from GitHub
download.file("https://github.com/jprice96/G-matrix-Database/archive/master.zip", destfile="cov_matrices.zip")
unzip("cov_matrices.zip")

#Resets working directory from My Documents to downloaded Cov_matrices folder
setwd("G-matrix-Database-master/Cov_matrices")

#This creates a list of all of the files in the directory
data.files = dir(pattern="*csv")

#This is the number of files/matrices we have
num.of.files = length(data.files)

#This creates a blank list
input.data = list()

#This creates a list of file names minus the .csv
file.names = list()
for(i in 1:num.of.files){
  file.names[i] = gsub(".csv", "", data.files[i])
}

col.names = list("trait", "trait.mean", "var(P)")
#This is a loop which goes through the files and converts the data
for(i in 1:num.of.files){
  input.data[[i]] = read.csv(data.files[i], header=FALSE)
  colnames(input.data[[i]]) = col.names
}

#This names all of the files by their author, year and pop
names(input.data) = file.names




#Sorting by sub-pop Attempt #3
populations = list()
for (i in 1:length(file.names)){
  populations[i] = strsplit(as.character(file.names[i]), split="_")
}

data.groups = data.frame()
data.groups[1,1] = 0
n = 1
for (i in 1:length(populations)){
  new.pop = TRUE
  for (j in 1:length(data.groups[1,])){
    if (data.groups[1,j] == populations[[i]][1]){
      new.pop = FALSE
    }
  }
  if (new.pop == TRUE){
    pop.name = objects(input.data, pattern=as.character(populations[[i]][1]));
    data.groups[1,n] = populations[[i]][1];
    data.groups[2:(length(pop.name)+1),n] = pop.name;
    n = n + 1
  }
}


#Extracting just the G-matrices
G.matrices = list()
for (i in 1:num.of.files){
  G.matrices[[i]] = (input.data[[i]][,4:((4+nrow(input.data[[i]][1]))-1)])
}
names(G.matrices) = file.names


Analysis = data.frame(0,0,0)
colnames(Analysis) = c("Population", "dSize", "dVar")
for (i in 1:length(data.groups[1,])){
  Analysis[i,1] = data.groups[1,i]
}
#Comparison of size of G
sum.Va = list()
attach(G.matrices)
for (i in 1:length(data.groups[1,])){
  for (j in 1:(length(data.groups[,i])-1)){
    Gmat = get(data.groups[(i+1),j])
    Va = eigen(Gmat, symmetric=TRUE, only.values=TRUE)
    sum.Va[j] = sum(Va$values)
  }
  #This needs to be changed, only working in cases of 1 ANC (sum.Va[[1]]) and 1 NOV (sum.Va[[2]])
  #Could possibly manipulate so that all ANC go in [[1]] and all NOV go in [[2]]
  Analysis[i,2] = sum.Va[[2]] - sum.Va[[1]]
}
detach(G.matrices)

#Should probably move to top of script
library(lattice)


attach(G.matrices)
for (i in 1:length(data.groups[1,])){
  for (j in 1:(length(data.groups[,i])-1)){
    Gmat[j] = get(data.groups[(i+1),j])
  }
  #I'm not entirely aware of what we are projecting where?
  for (k in 1:(length(Gmat))){
    for(l in 1:length(Gmat)){
      EigenA = eigen(Gmat[k])
      projectionA = abs(EigenA$vectors)
      EigenB = eigen(Gmat[l])
      projectionB = abs(EigenB$vectors)
      
    }
  }
detach(G.matrices)
