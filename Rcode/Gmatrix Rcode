#Downloads and unzips the G-matrix Data repository from GitHub
download.file("https://github.com/jprice96/G-matrix-Database/archive/master.zip", destfile="cov_matrices.zip")
unzip("cov_matrices.zip")

#Resets working directory from My Documents to downloaded Cov_matrices folder
setwd("G-matrix-Database-master/Cov_matrices")

#This creates a list of all of the files in the directory
data.files = dir(pattern="*csv")

#This is the number of files/matrices we have
num.of.files = length(data.files)

#This creates a blank list
input.data = list()

#This creates a list of file names minus the .csv
file.names = list()
for(i in 1:num.of.files){
  file.names[i] = gsub(".csv", "", data.files[i])
}
col.names = list("trait", "trait.mean", "heritability")

#This is a loop which goes through the files and converts the data
for(i in 1:num.of.files){
  input.data[[i]] = read.csv(data.files[i], header=FALSE)
  colnames(input.data[[i]]) = col.names
}

#This names all of the files by their author, year and pop
names(input.data) = file.names


#Sorting by sub-pop
populations = list()
for (i in 1:length(file.names)){
  populations[i] = strsplit(as.character(file.names[i]), split="_")
}

data.groups = data.frame()
data.groups[1,1] = 0
n = 1
for (i in 1:length(populations)){
  new.pop = TRUE
  for (j in 1:length(data.groups[1,])){
    if (data.groups[1,j] == populations[[i]][1]){
      new.pop = FALSE
    }
  }
  if (new.pop == TRUE){
    pop.name = objects(input.data, pattern=as.character(populations[[i]][1]));
    data.groups[1,n] = populations[[i]][1];
    data.groups[2:(length(pop.name)+1),n] = pop.name;
    n = n + 1
  }
}


# Extracting mixed (co)variance - correlation matrices
mix.matrices = list()
for (i in 1:num.of.files){
  mix.matrices[[i]] = (input.data[[i]][,4:((4+nrow(input.data[[i]][1]))-1)])
}
names(mix.matrices) = file.names

#Extracting (co)variance matrices
G.matrices = list()
G.matrices[[1]] = 0
G.matrices[[2]] = 0
k =1
for (i in 1:num.of.files){
  if(mix.matrices[[i]][1,1]!="NULL"){
    G.matrices[[k]] = matrix(nrow = length(mix.matrices[[i]][1,]), ncol=length(mix.matrices[[i]][1,]))
    lth = length(mix.matrices[[i]][1,])
    for (j in 1:lth){
      G.matrices[[k]][j:lth,j] = mix.matrices[[i]][j:lth,j]
      G.matrices[[k]][j,j:lth] = mix.matrices[[i]][j:lth,j]
    }
    k = k+1
  }
}

#Extracting correlation matrices
C.matrices = list()
C.matrices[[1]] = 0
C.matrices[[2]] = 0
for (i in 1:num.of.files){
  C.matrices[[i]] = matrix(nrow = length(mix.matrices[[i]][1,]), ncol=length(mix.matrices[[i]][1,]))
  lth = length(mix.matrices[[i]][1,])
  for (j in 1:(lth-1)){
    j_ = j+1
    C.matrices[[i]][j_:lth,j] = as.numeric(as.vector(unlist(mix.matrices[[i]][j,j_:lth], use.names=FALSE)))
    C.matrices[[i]][j,j_:lth] = as.numeric(as.vector(unlist(mix.matrices[[i]][j,j_:lth], use.names=FALSE)))
    C.matrices[[i]][j,j] = 1
  }
  C.matrices[[i]][lth,lth] = 1
}


#Check if study has G-matrix
has.Gmatrix = list()
for(i in 1:num.of.files){
  if(mix.matrices[[i]][1,1]=="NULL"){
    has.Gmatrix[i] = FALSE
  }
  if(mix.matrices[[i]][1,1]!="NULL"){
    has.Gmatrix[i] = TRUE
  }
}

G.mat.idxs = list()
k=1
for(i in 1:num.of.files){
  if(has.Gmatrix[i] == TRUE){
    G.mat.idxs[k] = i;
    k=k+1
  }
}

xstd.mat = list()
xstd.mat[[1]] = 0
xstd.mat[[2]] = 0
xstd.names = list()
k=1
for(i in 1:length(G.mat.idxs)){
  idx = G.mat.idxs[i]
  idx = idx[[1]]
  if(input.data[[idx]][2,2]!="NULL"){
    xstd.mat[[k]] = matrix(c(as.matrix(G.matrices[[i]]), input.data[[idx]][,2]), nrow = length(input.data[[idx]][,2]));
    xstd.names[k] = names(input.data[idx]);
    k=k+1
  }
}


#Mean standardize
X.matrices = list()
X.matrices[[1]] = 0
X.matrices[[2]] = 0
for(i in 1:length(xstd.mat)){
  mat.dim = length(xstd.mat[[i]][,1])
  Gmat = xstd.mat[[i]][1:mat.dim, 1:mat.dim]
  means = xstd.mat[[i]][,(mat.dim+1)]
  Mmat = means%*% t(means)
  X.matrices[[i]] = Gmat / Mmat
}
names(X.matrices) = xstd.names




#Comparison of Gmax contribution to variance (CORR matrices)

anc.gmax = list()
nov.gmax = list()
has.NOV = grep("NOV", file.names)
for(i in 1:length(has.NOV)){
  idx = has.NOV[i]
  pops = file.names[(idx-1):idx]
  anc.idx = grep(pops[1], file.names)
  nov.idx = grep(pops[2], file.names)
  anc.mat = C.matrices[[anc.idx]]
  
  anc.egn = eigen(anc.mat)
  anc.val = anc.egn$values
  anc.val = anc.val/length(anc.val)
  anc.gmax[i] = anc.val[1]
  
  nov.mat = C.matrices[[nov.idx]]
  nov.egn = eigen(nov.mat)
  nov.val = nov.egn$values
  nov.val = nov.val/length(nov.val)
  nov.gmax[i] = nov.val[1]
}

anc.gmax=unlist(anc.gmax)
nov.gmax=unlist(nov.gmax)
gmax.data = data.frame(ANC=anc.gmax, NOV=nov.gmax)

sig = wilcox.test(x=gmax.data[,1], y=gmax.data[,2], paired=TRUE)$p.value

plot(gmax.data, main="Correlation matrices", xlab="Gmax/n in ANC", ylab="Gmax/n in NOV", sub=sig)
null.line = data.frame(V1=c(0,1), V2=c(0,1))
lines(x=null.line)



#Comparison of Gmax contribution to variance FOR XSTD MATRICES

anc.gmax = list()
nov.gmax = list()
has.NOV = grep("NOV", xstd.names)
for(i in 1:length(has.NOV)){
  idx = has.NOV[i]
  pops = xstd.names[(idx-1):idx]
  anc.idx = grep(pops[1], xstd.names)
  nov.idx = grep(pops[2], xstd.names)
  
  anc.mat = X.matrices[[anc.idx]]
  anc.egn = eigen(anc.mat)
  anc.val = anc.egn$values
  anc.gmax[i] = anc.val[1]/sum(anc.val)
  
  nov.mat = X.matrices[[nov.idx]]
  nov.egn = eigen(nov.mat)
  nov.val = nov.egn$values
  nov.gmax[i] = nov.val[1]/sum(nov.val)
}

anc.gmax=unlist(anc.gmax)
nov.gmax=unlist(nov.gmax)
gmax.data = data.frame(ANC=anc.gmax, NOV=nov.gmax)

sig = wilcox.test(x=gmax.data[,1], y=gmax.data[,2], paired=TRUE)$p.value

plot(gmax.data, main="Mean Std. matrices", xlab="Gmax/sum(Va) in ANC", ylab="Gmax/sum(Va) in NOV", sub=sig)
null.line = data.frame(V1=c(-1,1), V2=c(-1,1))
lines(x=null.line)



#Comparison of size of G (XSTD matrices only)

anc.va = list()
nov.va = list()
has.NOV = grep("NOV", xstd.names)
for(i in 1:length(has.NOV)){
  idx = has.NOV[i]
  pops = xstd.names[(idx-1):idx]
  anc.idx = grep(pops[1], xstd.names)
  nov.idx = grep(pops[2], xstd.names)
  
  anc.mat = X.matrices[[anc.idx]]
  anc.egn = eigen(anc.mat)
  anc.val = anc.egn$values
  anc.va[i] = sum(anc.val)
  
  nov.mat = X.matrices[[nov.idx]]
  nov.egn = eigen(nov.mat)
  nov.val = nov.egn$values
  nov.va[i] = sum(nov.val)
}

anc.va=unlist(anc.va)
nov.va=unlist(nov.va)
va.data = data.frame(ANC=anc.va, NOV=nov.va)

sig = wilcox.test(x=va.data[,1], y=va.data[,2], paired=TRUE)$p.value

plot(va.data, main="Size of G", xlab="Size in ANC env", ylab="Size in NOV env", sub=sig)
null.line = data.frame(V1=c(-1,1), V2=c(-1,1))
lines(x=null.line)


#Plot heritabilities

anc.h2 = list()
anc.h2[[1]] = 0
anc.h2[[2]] = 0
nov.h2 = anc.h2
has.NOV = grep("NOV", file.names)
for(i in 1:length(has.NOV)){
  idx = has.NOV[i]
  anc.data = input.data[[(idx-1)]]
  nov.data = input.data[[idx]]
  anc.h2[[i]] = anc.data[,3]
  nov.h2[[i]] = nov.data[,3]
}

anc.h2=unlist(anc.h2[-c(24)])
nov.h2=unlist(nov.h2[-c(24)])


h2.data = data.frame(ANC=anc.h2, NOV=nov.h2)
h2.data = subset(h2.data, h2.data$ANC < 1)
h2.data = subset(h2.data, h2.data$NOV < 1)

sig = wilcox.test(x=h2.data[,1], y=h2.data[,2], paired=TRUE)$p.value

plot(h2.data, main="Diff in h2", xlab="h2 in ANC env", ylab="h2 in NOV env", sub=sig)
null.line = data.frame(V1=c(-1,2), V2=c(-1,2))
lines(x=null.line)

#Greater is below null.line, less is above null.line
wilcox.test(x=h2.data[,1], y=h2.data[,2], paired=TRUE, alternative="greater")
wilcox.test(x=h2.data[,1], y=h2.data[,2], paired=TRUE, alternative="less")


#Vector projection

anc.project = list()
anc.project[[1]] = 0
anc.project[[2]] = 0
nov.project = list()
nov.project[[1]] = 0
nov.project[[2]] = 0
prj.table = data.frame(V1=0, V2=0, V3=0, V4=0, V5=0, V6=0, V7=0)
#has.NOV already exists from comparison of C.matrices Gmax values
has.NOV = grep("NOV", file.names)
for(j in 1:7){
  for(i in 1:length(has.NOV)){
    idx = has.NOV[i]
    pops = file.names[(idx-1):idx]
    anc.idx = grep(pops[1], file.names)
    nov.idx = grep(pops[2], file.names)
    anc.mat = C.matrices[[anc.idx]]
    nov.mat = C.matrices[[nov.idx]]
    
    if(length(anc.mat[,1])>=j){
      anc.egn = eigen(anc.mat);
      anc.bta = anc.egn$vectors[,j];
      anc.project[[i]] = t(anc.bta) %*% anc.mat %*% anc.bta
    }
    if(length(anc.mat[,1])<j){
      anc.project[[i]] = NA
    }
    if(length(nov.mat[,1])>=j){
      nov.egn = eigen(nov.mat);
      nov.bta = nov.egn$vectors[,j];
      nov.project[[i]] = t(nov.bta) %*% anc.mat %*% nov.bta
      nov.project[[i]] = nov.project[[i]]/sum(anc.egn$values)
    }
    if(length(nov.mat[,1])<j){
      nov.project[[i]] = NA
    }
  }
  prj.table[1:length(nov.project),j] = unlist(nov.project)
}

PRJ = rep("PRJ", times=length(prj.table[,1]))
prj.table[,8] = PRJ

#Distribution of variance across eigenvalues

anc.values = list()
anc.values[[1]] = 0
anc.values[[8]] = 0
nov.values = list()
nov.values[[1]] = 0
nov.values[[8]] = 0
has.NOV = grep("NOV", file.names)
for(i in 1:length(has.NOV)){
  idx = has.NOV[i]
  anc.mat = C.matrices[[(idx-1)]]
  nov.mat = C.matrices[[idx]]
  
  anc.egn = eigen(anc.mat)
  anc.val = anc.egn$values
  anc.val = anc.val/length(anc.val)
  
  nov.egn = eigen(nov.mat)
  nov.val = nov.egn$values
  nov.val = nov.val/length(nov.val)
  
  for(k in 1:length(anc.val)){
    anc.values[[k]][i] = anc.val[k]
    nov.values[[k]][i] = nov.val[k]
  }
}

anc.table = data.frame()
for(i in 1:length(anc.values)){
  anc.table[(1:length(anc.values[[i]])),i] = anc.values[[i]]
}
ANC = "ANC"
anc.table[(1:length(anc.table[,1])),(length(anc.table[1,])+1)] = rep(ANC, times=length(anc.table[,1]))

nov.table = data.frame()
for(i in 1:length(nov.values)){
  nov.table[(1:length(nov.values[[i]])),i] = nov.values[[i]]
}
NOV = "NOV"
nov.table[(1:length(nov.table[,1])),(length(nov.table[1,])+1)] = rep(NOV, times=length(nov.table[,1]))


colours = c("coral3", "peru", "sandybrown", "turquoise4", "aquamarine4", "lightseagreen")
x.axis.labels = c("", "E1", "E2", "E3", "E4", "E5", "E6", "E7", "")
x.axis.ticks = c(0, 2, 5, 8, 11, 14, 17, 20, 24)
boxplot(list(anc.values[[1]], nov.values[[1]], prj.table[,1],
             anc.values[[2]], nov.values[[2]], prj.table[,2],
             anc.values[[3]], nov.values[[3]], prj.table[,3],
             anc.values[[4]], nov.values[[4]], prj.table[,4],
             anc.values[[5]], nov.values[[5]], prj.table[,5],
             anc.values[[6]], nov.values[[6]], prj.table[,6],
             anc.values[[7]], nov.values[[7]], prj.table[,7]),
        col=colours, xlab="Amount of total variation contributed", ylab="Eigenvalues", main="Comparison of eigenvalue variance distribution between environments",
        frame.plot=FALSE, axes=FALSE)
axis(1, at=x.axis.ticks, labels=x.axis.labels)
axis(2)
legend(18, 0.9, legend=c("anc", "nov", "nov in anc"), bty="n")

p.val = list()
for(i in 1:7){
  p.val[i] = t.test(x=na.omit(anc.values[[i]]), y=na.omit(prj.table[,i]), paired=TRUE)$p.value
}

k=1
for(i in 1:length(p.val)){
  if(p.val[i]<=0.05){
    points(x=((i*3)+0.2), y=(quantile(prj.table[,i], na.rm=TRUE)[4]+0.1), pch="*", cex=2)
    k=k+1
  }
}
